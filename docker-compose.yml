services:
  redpanda:
    image: docker.redpanda.com/redpandadata/redpanda:v25.1.1
    container_name: redpanda
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      # Address the broker advertises to clients that connect to the Kafka API.
      # Use the internal addresses to connect to the Redpanda brokers'
      # from inside the same Docker network.
      # Use the external addresses to connect to the Redpanda brokers'
      # from outside the Docker network.
      - --advertise-kafka-addr internal://redpanda:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      # Address the broker advertises to clients that connect to the HTTP Proxy.
      - --advertise-pandaproxy-addr internal://redpanda:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      # Redpanda brokers use the RPC API to communicate with each other internally.
      - --rpc-addr redpanda:33145
      - --advertise-rpc-addr redpanda:33145
      # Mode dev-container uses well-known configuration properties for development in containers.
      - --mode dev-container
      # Tells Seastar (the framework Redpanda uses under the hood) to use 1 core on the system.
      - --smp 1
      - --default-log-level=info
    volumes:
      - redpanda:/var/lib/redpanda/data
    networks:
      - debezium_network
    ports:
      - 18081:18081
      - 18082:18082
      - 19092:19092
      - 19644:9644
  console:
    container_name: redpanda-console
    image: docker.redpanda.com/redpandadata/console:v3.0.0
    networks:
      - debezium_network
    entrypoint: /bin/sh
    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console'
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda:9092"]
        schemaRegistry:
            enabled: true
            urls: ["http://redpanda:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda:9644"]
    ports:
      - 8080:8080
    depends_on:
      - redpanda
  connect:
    container_name: debezium
    hostname: debezium
    image: quay.io/debezium/connect:3.1
    ports:
     - 8083:8083
    depends_on:
      - redpanda
      - postgres
    environment:
     - BOOTSTRAP_SERVERS=redpanda:9092
     - GROUP_ID=1
     - CONFIG_STORAGE_TOPIC=my_connect_configs
     - OFFSET_STORAGE_TOPIC=my_connect_offsets
     - STATUS_STORAGE_TOPIC=my_connect_statuses
    volumes:
      - debezium:/kafka/connect/debezium-connector-postgres
    networks:
      - debezium_network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 900M
  postgres:
    container_name: postgres
    image: postgres:17-alpine
    hostname: postgres
    command:
      - "postgres"
      - "-c"
      - "listen_addresses=*"
      - "-c"
      - "shared_buffers=128MB"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
      - "-c"
      - "pg_stat_statements.max=10000"
      - "-c"
      - "pg_stat_statements.track=all"
      - "-c"
      - "jit=off"
      - "-c"
      - "wal_level=logical"
      - "-c"
      - "archive_mode=on"
      - "-c"
      - "archive_command=gzip < /data/postgres/%p > /data/wal_archive/%f.gz"
      - "-c"
      - "archive_cleanup_command=pg_archivecleanup -d /data/wal_archive %r"
      - "-c"
      - 'log_min_messages=DEBUG1'
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      PGDATA: /data/postgres
    ports:
      - 5432:5432
    volumes:
       - pg_data:/data/postgres
       - pg_wal:/data/wal_archive
       - ${PWD}/postgres/init.sql:/docker-entrypoint-initdb.d/01-init.sql
    networks:
      - debezium_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 400M

networks:
  debezium_network:
    driver: bridge

volumes:
  redpanda:
    driver: local
    driver_opts:
      o: bind
      type: rw
      device: ${PWD}/redpanda_data
  debezium:
    driver: local
    driver_opts:
      o: bind
      type: rw
      device: ${PWD}/debezium_data
  pg_data:
    driver: local
    driver_opts:
      o: bind
      type: rw
      device: ${PWD}/postgres/pg_data
  pg_wal:
    driver: local
    driver_opts:
      o: bind
      type: rw
      device: ${PWD}/postgres/pg_wal_data
